var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, Renderer, Input } from '@angular/core';
/**
 * # ```<audio-track-progress>```
 *
 * Renders a timer component displaying track progress and duration
 *
 * ## Usage
 * ````
 * <audio-track-progress [audioTrack]="track"></audio-track-progress>
 * ````
 *
 * @element audio-track-progress
 * @parents audio-track
 * @export
 * @class AudioTrackProgressComponent
 */
var AudioTrackProgressComponent = (function () {
    function AudioTrackProgressComponent() {
    }
    return AudioTrackProgressComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], AudioTrackProgressComponent.prototype, "audioTrack", void 0);
AudioTrackProgressComponent = __decorate([
    Component({
        selector: 'audio-track-progress',
        template: '<em *ngIf="audioTrack.duration > 0">{{audioTrack.progress | audioTime}} / </em><em>{{audioTrack.duration | audioTime}}</em>'
    })
], AudioTrackProgressComponent);
export { AudioTrackProgressComponent };
/**
 * # ```<audio-track-progress-bar>```
 *
 * Renders a progress bar with optional timer, duration and progress indicator
 *
 * ## Usage
 * ````
 *  <audio-track-progress-bar duration progress [audioTrack]="audio"></audio-track-progress-bar>
 * ````
 *
 * @element audio-track-progress-bar
 * @parents audio-track
 * @export
 * @class AudioTrackProgressBarComponent
 */
var AudioTrackProgressBarComponent = (function () {
    function AudioTrackProgressBarComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.completed = 0;
        this.range = 0;
    }
    Object.defineProperty(AudioTrackProgressBarComponent.prototype, "progress", {
        /**
         * Input property indicating whether to display track progress
         *
         * @property @Input() progress
         * @type {boolean}
         */
        set: function (v) {
            this.showProgress = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioTrackProgressBarComponent.prototype, "duration", {
        /**
         * Input property indicating whether to display track duration
         *
         * @property @Input() duration
         * @type {boolean}
         */
        set: function (v) {
            this.showDuration = true;
        },
        enumerable: true,
        configurable: true
    });
    AudioTrackProgressBarComponent.prototype.ngOnInit = function () {
        this.renderer.setElementStyle(this.el.nativeElement, 'width', '100%');
    };
    AudioTrackProgressBarComponent.prototype.ngDoCheck = function () {
        if (this.audioTrack.completed > 0 && !Object.is(this.audioTrack.completed, this.completed)) {
            this.completed = this.audioTrack.completed;
            this.range = Math.round(this.completed * 100 * 100) / 100;
        }
    };
    AudioTrackProgressBarComponent.prototype.seekTo = function () {
        var seekTo = Math.round(this.audioTrack.duration * this.range) / 100;
        if (!Number.isNaN(seekTo))
            this.audioTrack.seekTo(seekTo);
    };
    return AudioTrackProgressBarComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], AudioTrackProgressBarComponent.prototype, "audioTrack", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AudioTrackProgressBarComponent.prototype, "progress", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AudioTrackProgressBarComponent.prototype, "duration", null);
AudioTrackProgressBarComponent = __decorate([
    Component({
        selector: 'audio-track-progress-bar',
        template: "\n    <ion-range [(ngModel)]=\"range\" min=\"0\" max=\"100\" (ionChange)=\"seekTo()\" name=\"progress\" ngDefaultControl>\n      <time *ngIf=\"showProgress\" range-left>{{audioTrack.progress | audioTime}}</time>\n      <time *ngIf=\"showDuration\" range-right>{{audioTrack.duration | audioTime}}</time>\n    </ion-range>\n    "
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer])
], AudioTrackProgressBarComponent);
export { AudioTrackProgressBarComponent };
//# sourceMappingURL=ionic-audio-track-progress-component.js.map