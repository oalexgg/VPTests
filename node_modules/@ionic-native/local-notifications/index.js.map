{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/local-notifications/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface ILocalNotification {\r\n\r\n  /**\r\n   * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\r\n   * Default: 0\r\n   */\r\n  id?: number;\r\n\r\n  /**\r\n   * First row of the notification\r\n   * Default: Empty string (iOS) or the app name (Android)\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * Second row of the notification\r\n   * Default: Empty string\r\n   */\r\n  text?: string;\r\n\r\n  /**\r\n   * The interval at which to reschedule the local notification. That can be a value of second, minute, hour, day, week, month or year\r\n   * Default: 0 (which means that the system triggers the local notification once)\r\n   */\r\n  every?: string;\r\n\r\n  /**\r\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\r\n   * Default: now ~ new Date()\r\n   */\r\n  at?: any;\r\n  firstAt?: any;\r\n\r\n  /**\r\n   * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\r\n   * Default: 0 (which means don't show a number)\r\n   */\r\n  badge?: number;\r\n\r\n  /**\r\n   * Uri of the file containing the sound to play when an alert is displayed\r\n   * Default: res://platform_default\r\n   */\r\n  sound?: string;\r\n\r\n  /**\r\n   * Arbitrary data, objects will be encoded to JSON string\r\n   * Default: null\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Uri of the icon that is shown in the ticker and notification\r\n   * Default: res://icon\r\n   */\r\n  icon?: string;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\r\n   * Default: res://ic_popup_reminder\r\n   */\r\n  smallIcon?: string;\r\n\r\n  /**\r\n  * ANDROID ONLY\r\n  * RGB value for the background color of the smallIcon.\r\n  * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\r\n  */\r\n  color?: string;\r\n\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * Ongoing notifications differ from regular notifications in the following ways:\r\n   * - They are sorted above the regular notifications in the notification panel\r\n   * - They do not have an 'X' close button, and are not affected by the \"Clear all\" button\r\n   * Default: false\r\n   */\r\n  ongoing?: boolean;\r\n\r\n  /**\r\n   * ANDROID ONLY\r\n   * ARGB value that you would like the LED on the device to blink\r\n   * Default: FFFFFF\r\n   */\r\n  led?: string;\r\n}\r\n\r\n/**\r\n * @name Local Notifications\r\n * @description\r\n * This plugin allows you to display local notifications on the device\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { LocalNotifications } from '@ionic-native/local-notifications';\r\n *\r\n *\r\n * constructor(private localNotifications: LocalNotifications) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * // Schedule a single notification\r\n * this.localNotifications.schedule({\r\n *   id: 1,\r\n *   text: 'Single ILocalNotification',\r\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\r\n *   data: { secret: key }\r\n * });\r\n *\r\n *\r\n * // Schedule multiple notifications\r\n * this.localNotifications.schedule([{\r\n *    id: 1,\r\n *    text: 'Multi ILocalNotification 1',\r\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\r\n *    data: { secret:key }\r\n *   },{\r\n *    id: 2,\r\n *    title: 'Local ILocalNotification Example',\r\n *    text: 'Multi ILocalNotification 2',\r\n *    icon: 'http://example.com/icon.png'\r\n * }]);\r\n *\r\n *\r\n * // Schedule delayed notification\r\n * this.localNotifications.schedule({\r\n *    text: 'Delayed ILocalNotification',\r\n *    at: new Date(new Date().getTime() + 3600),\r\n *    led: 'FF0000',\r\n *    sound: null\r\n * });\r\n * ```\r\n * @interfaces\r\n * ILocalNotification\r\n */\r\n@Plugin({\r\n  pluginName: 'LocalNotifications',\r\n  plugin: 'de.appplant.cordova.plugin.local-notification',\r\n  pluginRef: 'cordova.plugins.notification.local',\r\n  repo: 'https://github.com/katzer/cordova-plugin-local-notifications',\r\n  platforms: ['Android', 'iOS', 'Windows']\r\n})\r\n\r\nexport class LocalNotifications extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Schedules a single or multiple notifications\r\n   * @param options {Notification | Array<ILocalNotification>} optional\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  schedule(options?: ILocalNotification | Array<ILocalNotification>): void { }\r\n\r\n  /**\r\n   * Updates a previously scheduled notification. Must include the id in the options parameter.\r\n   * @param options {ILocalNotification} optional\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  update(options?: ILocalNotification): void { }\r\n\r\n  /**\r\n   * Clears single or multiple notifications\r\n   * @param notificationId {any} A single notification id, or an array of notification ids.\r\n   * @returns {Promise<any>} Returns a promise when the notification had been cleared\r\n   */\r\n  @Cordova()\r\n  clear(notificationId: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Clears all notifications\r\n   * @returns {Promise<any>} Returns a promise when all notifications have cleared\r\n   */\r\n  @Cordova({\r\n    successIndex: 0,\r\n    errorIndex: 2\r\n  })\r\n  clearAll(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Cancels single or multiple notifications\r\n   * @param notificationId {any} A single notification id, or an array of notification ids.\r\n   * @returns {Promise<any>} Returns a promise when the notification is canceled\r\n   */\r\n  @Cordova()\r\n  cancel(notificationId: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * Cancels all notifications\r\n   * @returns {Promise<any>} Returns a promise when all notifications are canceled\r\n   */\r\n  @Cordova({\r\n    successIndex: 0,\r\n    errorIndex: 2\r\n  })\r\n  cancelAll(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Checks presence of a notification\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  isPresent(notificationId: number): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Checks is a notification is scheduled\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  isScheduled(notificationId: number): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Checks if a notification is triggered\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  isTriggered(notificationId: number): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Get all the notification ids\r\n   * @returns {Promise<Array<number>>}\r\n   */\r\n  @Cordova()\r\n  getAllIds(): Promise<Array<number>> { return; }\r\n\r\n  /**\r\n   * Get the ids of triggered notifications\r\n   * @returns {Promise<Array<number>>}\r\n   */\r\n  @Cordova()\r\n  getTriggeredIds(): Promise<Array<number>> { return; }\r\n\r\n  /**\r\n   * Get the ids of scheduled notifications\r\n   * @returns {Promise<Array<number>>} Returns a promise\r\n   */\r\n  @Cordova()\r\n  getScheduledIds(): Promise<Array<number>> { return; }\r\n\r\n  /**\r\n   * Get a notification object\r\n   * @param notificationId {any} The id of the notification to get\r\n   * @returns {Promise<ILocalNotification>}\r\n   */\r\n  @Cordova()\r\n  get(notificationId: any): Promise<ILocalNotification> { return; }\r\n\r\n  /**\r\n   * Get a scheduled notification object\r\n   * @param notificationId {any} The id of the notification to get\r\n   * @returns {Promise<ILocalNotification>}\r\n   */\r\n  @Cordova()\r\n  getScheduled(notificationId: any): Promise<ILocalNotification> { return; }\r\n\r\n  /**\r\n   * Get a triggered notification object\r\n   * @param notificationId The id of the notification to get\r\n   * @returns {Promise<ILocalNotification>}\r\n   */\r\n  @Cordova()\r\n  getTriggered(notificationId: any): Promise<ILocalNotification> { return; }\r\n\r\n  /**\r\n   * Get all notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  @Cordova()\r\n  getAll(): Promise<Array<ILocalNotification>> { return; }\r\n\r\n  /**\r\n   * Get all scheduled notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  @Cordova()\r\n  getAllScheduled(): Promise<Array<ILocalNotification>> { return; }\r\n\r\n  /**\r\n   * Get all triggered notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  @Cordova()\r\n  getAllTriggered(): Promise<Array<ILocalNotification>> { return; }\r\n\r\n  /**\r\n   * Register permission to show notifications if not already granted.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  registerPermission(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Informs if the app has the permission to show notifications.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  hasPermission(): Promise<boolean> { return; }\r\n\r\n\r\n  /**\r\n   * Sets a callback for a specific event\r\n   * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall\r\n   * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  on(eventName: string, callback: any): void { }\r\n\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}