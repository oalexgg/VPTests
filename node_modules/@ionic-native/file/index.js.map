{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/file/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CordovaProperty, Plugin, CordovaCheck } from '@ionic-native/core';\r\n\r\ndeclare var window: any;\r\ndeclare var cordova: any;\r\n\r\n/** This interface represents a file system. */\r\nexport interface FileSystem {\r\n  /* The name of the file system, unique across the list of exposed file systems. */\r\n  name: string;\r\n  /** The root directory of the file system. */\r\n  root: DirectoryEntry;\r\n}\r\n\r\n/**\r\n * An abstract interface representing entries in a file system,\r\n * each of which may be a File or DirectoryEntry.\r\n */\r\nexport interface Entry {\r\n  /** Entry is a file. */\r\n  isFile: boolean;\r\n  /** Entry is a directory. */\r\n  isDirectory: boolean;\r\n  /** The name of the entry, excluding the path leading to it. */\r\n  name: string;\r\n  /** The full absolute path from the root to the entry. */\r\n  fullPath: string;\r\n  /** The file system on which the entry resides. */\r\n  filesystem: FileSystem;\r\n  nativeURL: string;\r\n  /**\r\n   * Look up metadata about this entry.\r\n   * @param successCallback A callback that is called with the time of the last modification.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  getMetadata(successCallback: (metadata: Metadata) => void,\r\n              errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Move an entry to a different location on the file system. It is an error to try to:\r\n   *     move a directory inside itself or to any child at any depth;move an entry into its parent if a name different from its current one isn't provided;\r\n   *     move a file to a path occupied by a directory;\r\n   *     move a directory to a path occupied by a file;\r\n   *     move any element to a path occupied by a directory which is not empty.\r\n   * A move of a file on top of an existing file must attempt to delete and replace that file.\r\n   * A move of a directory on top of an existing empty directory must attempt to delete and replace that directory.\r\n   * @param parent  The directory to which to move the entry.\r\n   * @param newName The new name of the entry. Defaults to the Entry's current name if unspecified.\r\n   * @param successCallback A callback that is called with the Entry for the new location.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  moveTo(parent: DirectoryEntry,\r\n         newName?: string,\r\n         successCallback?: (entry: Entry) => void,\r\n         errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Copy an entry to a different location on the file system. It is an error to try to:\r\n   *     copy a directory inside itself or to any child at any depth;\r\n   *     copy an entry into its parent if a name different from its current one isn't provided;\r\n   *     copy a file to a path occupied by a directory;\r\n   *     copy a directory to a path occupied by a file;\r\n   *     copy any element to a path occupied by a directory which is not empty.\r\n   *     A copy of a file on top of an existing file must attempt to delete and replace that file.\r\n   *     A copy of a directory on top of an existing empty directory must attempt to delete and replace that directory.\r\n   * Directory copies are always recursive--that is, they copy all contents of the directory.\r\n   * @param parent The directory to which to move the entry.\r\n   * @param newName The new name of the entry. Defaults to the Entry's current name if unspecified.\r\n   * @param successCallback A callback that is called with the Entry for the new object.\r\n   * @param errorCallback A callback that is called when errors happen.\r\n   */\r\n  copyTo(parent: DirectoryEntry,\r\n         newName?: string,\r\n         successCallback?: (entry: Entry) => void,\r\n         errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Returns a URL that can be used as the src attribute of a <video> or <audio> tag.\r\n   * If that is not possible, construct a cdvfile:// URL.\r\n   * @return string URL\r\n   */\r\n  toURL(): string;\r\n  /**\r\n   * Return a URL that can be passed across the bridge to identify this entry.\r\n   * @return string URL that can be passed across the bridge to identify this entry\r\n   */\r\n  toInternalURL(): string;\r\n  /**\r\n   * Deletes a file or directory. It is an error to attempt to delete a directory that is not empty. It is an error to attempt to delete the root directory of a filesystem.\r\n   * @param successCallback A callback that is called on success.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  remove(successCallback: () => void,\r\n         errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Look up the parent DirectoryEntry containing this Entry. If this Entry is the root of its filesystem, its parent is itself.\r\n   * @param successCallback A callback that is called with the time of the last modification.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  getParent(successCallback: (entry: Entry) => void,\r\n            errorCallback?: (error: FileError) => void): void;\r\n}\r\n\r\n/** This interface supplies information about the state of a file or directory. */\r\nexport interface Metadata {\r\n  /** This is the time at which the file or directory was last modified. */\r\n  modificationTime: Date;\r\n  /** The size of the file, in bytes. This must return 0 for directories. */\r\n  size: number;\r\n}\r\n\r\n/** This interface represents a directory on a file system. */\r\nexport interface DirectoryEntry extends Entry {\r\n  /**\r\n   * Creates a new DirectoryReader to read Entries from this Directory.\r\n   */\r\n  createReader(): DirectoryReader;\r\n  /**\r\n   * Creates or looks up a file.\r\n   * @param path    Either an absolute path or a relative path from this DirectoryEntry\r\n   *                to the file to be looked up or created.\r\n   *                It is an error to attempt to create a file whose immediate parent does not yet exist.\r\n   * @param options If create and exclusive are both true, and the path already exists, getFile must fail.\r\n   *                If create is true, the path doesn't exist, and no other error occurs, getFile must create it as a zero-length file and return a corresponding FileEntry.\r\n   *                If create is not true and the path doesn't exist, getFile must fail.\r\n   *                If create is not true and the path exists, but is a directory, getFile must fail.\r\n   *                Otherwise, if no other error occurs, getFile must return a FileEntry corresponding to path.\r\n   * @param successCallback A callback that is called to return the File selected or created.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  getFile(path: string, options?: Flags,\r\n          successCallback?: (entry: FileEntry) => void,\r\n          errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Creates or looks up a directory.\r\n   * @param path    Either an absolute path or a relative path from this DirectoryEntry\r\n   *                to the directory to be looked up or created.\r\n   *                It is an error to attempt to create a directory whose immediate parent does not yet exist.\r\n   * @param options If create and exclusive are both true and the path already exists, getDirectory must fail.\r\n   *                If create is true, the path doesn't exist, and no other error occurs, getDirectory must create and return a corresponding DirectoryEntry.\r\n   *                If create is not true and the path doesn't exist, getDirectory must fail.\r\n   *                If create is not true and the path exists, but is a file, getDirectory must fail.\r\n   *                Otherwise, if no other error occurs, getDirectory must return a DirectoryEntry corresponding to path.\r\n   * @param successCallback A callback that is called to return the Directory selected or created.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  getDirectory(path: string, options?: Flags,\r\n               successCallback?: (entry: DirectoryEntry) => void,\r\n               errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Deletes a directory and all of its contents, if any. In the event of an error (e.g. trying\r\n   * to delete a directory that contains a file that cannot be removed), some of the contents\r\n   * of the directory may be deleted. It is an error to attempt to delete the root directory of a filesystem.\r\n   * @param successCallback A callback that is called on success.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  removeRecursively(successCallback: () => void,\r\n                    errorCallback?: (error: FileError) => void): void;\r\n}\r\n\r\nexport interface RemoveResult {\r\n  success: boolean;\r\n  fileRemoved: Entry;\r\n}\r\n\r\n/**\r\n * This dictionary is used to supply arguments to methods\r\n * that look up or create files or directories.\r\n */\r\nexport interface Flags {\r\n  /** Used to indicate that the user wants to create a file or directory if it was not previously there. */\r\n  create?: boolean;\r\n  /** By itself, exclusive must have no effect. Used with create, it must cause getFile and getDirectory to fail if the target path already exists. */\r\n  exclusive?: boolean;\r\n}\r\n\r\nexport interface WriteOptions {\r\n  replace?: boolean;\r\n  append?: boolean;\r\n  truncate?: number; // if present, number of bytes to truncate file to before writing\r\n}\r\n\r\n/**\r\n * This interface lets a user list files and directories in a directory. If there are\r\n * no additions to or deletions from a directory between the first and last call to\r\n * readEntries, and no errors occur, then:\r\n *     A series of calls to readEntries must return each entry in the directory exactly once.\r\n *     Once all entries have been returned, the next call to readEntries must produce an empty array.\r\n *     If not all entries have been returned, the array produced by readEntries must not be empty.\r\n *     The entries produced by readEntries must not include the directory itself [\".\"] or its parent [\"..\"].\r\n */\r\nexport interface DirectoryReader {\r\n  /**\r\n   * Read the next block of entries from this directory.\r\n   * @param successCallback Called once per successful call to readEntries to deliver the next\r\n   *                        previously-unreported set of Entries in the associated Directory.\r\n   *                        If all Entries have already been returned from previous invocations\r\n   *                        of readEntries, successCallback must be called with a zero-length array as an argument.\r\n   * @param errorCallback   A callback indicating that there was an error reading from the Directory.\r\n   */\r\n  readEntries(successCallback: (entries: Entry[]) => void,\r\n              errorCallback?: (error: FileError) => void): void;\r\n}\r\n\r\n/** This interface represents a file on a file system. */\r\nexport interface FileEntry extends Entry {\r\n  /**\r\n   * Creates a new FileWriter associated with the file that this FileEntry represents.\r\n   * @param successCallback A callback that is called with the new FileWriter.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  createWriter(successCallback: (writer: FileWriter) => void,\r\n               errorCallback?: (error: FileError) => void): void;\r\n  /**\r\n   * Returns a File that represents the current state of the file that this FileEntry represents.\r\n   * @param successCallback A callback that is called with the File.\r\n   * @param errorCallback   A callback that is called when errors happen.\r\n   */\r\n  file(successCallback: (file: File) => void,\r\n       errorCallback?: (error: FileError) => void): void;\r\n}\r\n\r\n/**\r\n * This interface provides methods to monitor the asynchronous writing of blobs\r\n * to disk using progress events and event handler attributes.\r\n */\r\nexport interface FileSaver extends EventTarget {\r\n  /** Terminate file operation */\r\n  abort(): void;\r\n  /**\r\n   * The FileSaver object can be in one of 3 states. The readyState attribute, on getting,\r\n   * must return the current state, which must be one of the following values:\r\n   *     INIT\r\n   *     WRITING\r\n   *     DONE\r\n   */\r\n  readyState: number;\r\n  /** Handler for writestart events. */\r\n  onwritestart: (event: ProgressEvent) => void;\r\n  /** Handler for progress events. */\r\n  onprogress: (event: ProgressEvent) => void;\r\n  /** Handler for write events. */\r\n  onwrite: (event: ProgressEvent) => void;\r\n  /** Handler for abort events. */\r\n  onabort: (event: ProgressEvent) => void;\r\n  /** Handler for error events. */\r\n  onerror: (event: ProgressEvent) => void;\r\n  /** Handler for writeend events. */\r\n  onwriteend: (event: ProgressEvent) => void;\r\n  /** The last error that occurred on the FileSaver. */\r\n  error: Error;\r\n}\r\n\r\n/**\r\n * This interface expands on the FileSaver interface to allow for multiple write\r\n * actions, rather than just saving a single Blob.\r\n */\r\nexport interface FileWriter extends FileSaver {\r\n  /**\r\n   * The byte offset at which the next write to the file will occur. This always less or equal than length.\r\n   * A newly-created FileWriter will have position set to 0.\r\n   */\r\n  position: number;\r\n  /**\r\n   * The length of the file. If the user does not have read access to the file,\r\n   * this will be the highest byte offset at which the user has written.\r\n   */\r\n  length: number;\r\n  /**\r\n   * Write the supplied data to the file at position.\r\n   * @param {Blob} data The blob to write.\r\n   */\r\n  write(data: ArrayBuffer | Blob | string): void;\r\n  /**\r\n   * The file position at which the next write will occur.\r\n   * @param offset If nonnegative, an absolute byte offset into the file.\r\n   *               If negative, an offset back from the end of the file.\r\n   */\r\n  seek(offset: number): void;\r\n  /**\r\n   * Changes the length of the file to that specified. If shortening the file, data beyond the new length\r\n   * will be discarded. If extending the file, the existing data will be zero-padded up to the new length.\r\n   * @param size The size to which the length of the file is to be adjusted, measured in bytes.\r\n   */\r\n  truncate(size: number): void;\r\n}\r\n\r\n/* FileWriter states */\r\nexport declare var FileWriter: {\r\n  INIT: number;\r\n  WRITING: number;\r\n  DONE: number\r\n};\r\n\r\nexport interface FileReader {\r\n  readyState: number; // see constants in var declaration below\r\n  error: Error;\r\n  result: string | ArrayBuffer; // type depends on readAsXXX() call type\r\n\r\n  onloadstart: (evt: ProgressEvent) => void;\r\n  onprogress: (evt: ProgressEvent) => void;\r\n  onload: (evt: ProgressEvent) => void;\r\n  onerror: (evt: ProgressEvent) => void;\r\n  onloadend: (evt: ProgressEvent) => void;\r\n  onabort: (evt: ProgressEvent) => void;\r\n\r\n  abort(): void;\r\n  readAsText(fe: File | Blob, encoding?: string): void;\r\n  readAsDataURL(fe: File | Blob): void;\r\n  readAsBinaryString(fe: File | Blob): void;\r\n  readAsArrayBuffer(fe: File | Blob): void;\r\n}\r\n\r\nexport declare var FileReader: {\r\n  EMPTY: number;\r\n  LOADING: number;\r\n  DONE: number;\r\n\r\n  new(): FileReader;\r\n};\r\n\r\nexport interface FileError {\r\n  /** Error code */\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport declare var FileError: {\r\n  new (code: number): FileError;\r\n  NOT_FOUND_ERR: number;\r\n  SECURITY_ERR: number;\r\n  ABORT_ERR: number;\r\n  NOT_READABLE_ERR: number;\r\n  ENCODING_ERR: number;\r\n  NO_MODIFICATION_ALLOWED_ERR: number;\r\n  INVALID_STATE_ERR: number;\r\n  SYNTAX_ERR: number;\r\n  INVALID_MODIFICATION_ERR: number;\r\n  QUOTA_EXCEEDED_ERR: number;\r\n  TYPE_MISMATCH_ERR: number;\r\n  PATH_EXISTS_ERR: number;\r\n};\r\n\r\n\r\n/**\r\n * @name File\r\n * @description\r\n * This plugin implements a File API allowing read/write access to files residing on the device.\r\n *\r\n * The File class implements static convenience functions to access files and directories.\r\n *\r\n * Example:\r\n * ```\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * constructor(private file: File) { }\r\n *\r\n * ...\r\n *\r\n * this.file.checkDir(this.file.dataDirectory, 'mydir').then(_ => console.log('Directory exists')).catch(err => console.log('Directory doesnt exist'));\r\n *\r\n * ```\r\n *\r\n *  This plugin is based on several specs, including : The HTML5 File API http://www.w3.org/TR/FileAPI/\r\n *  The (now-defunct) Directories and System extensions Latest: http://www.w3.org/TR/2012/WD-file-system-api-20120417/\r\n *  Although most of the plugin code was written when an earlier spec was current: http://www.w3.org/TR/2011/WD-file-system-api-20110419/\r\n *  It also implements the FileWriter spec : http://dev.w3.org/2009/dap/file-system/file-writer.html\r\n */\r\n@Plugin({\r\n  pluginName: 'File',\r\n  plugin: 'cordova-plugin-file',\r\n  pluginRef: 'cordova.file',\r\n  repo: 'https://github.com/apache/cordova-plugin-file',\r\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'OS X', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class File {\r\n\r\n  /**\r\n   *  Read-only directory where the application is installed.\r\n   */\r\n  @CordovaProperty\r\n  applicationDirectory: string;\r\n\r\n  /**\r\n   *  Read-only directory where the application is installed.\r\n   */\r\n  @CordovaProperty\r\n  applicationStorageDirectory: string;\r\n\r\n  /**\r\n   * Where to put app-specific data files.\r\n   */\r\n  @CordovaProperty\r\n  dataDirectory: string;\r\n\r\n  /**\r\n   * Cached files that should survive app restarts.\r\n   * Apps should not rely on the OS to delete files in here.\r\n   */\r\n  @CordovaProperty\r\n  cacheDirectory: string;\r\n\r\n  /**\r\n   * Android: the application space on external storage.\r\n   */\r\n  @CordovaProperty\r\n  externalApplicationStorageDirectory: string;\r\n\r\n  /**\r\n   *  Android: Where to put app-specific data files on external storage.\r\n   */\r\n  @CordovaProperty\r\n  externalDataDirectory: string;\r\n\r\n  /**\r\n   * Android: the application cache on external storage.\r\n   */\r\n  @CordovaProperty\r\n  externalCacheDirectory: string;\r\n\r\n  /**\r\n   * Android: the external storage (SD card) root.\r\n   */\r\n  @CordovaProperty\r\n  externalRootDirectory: string;\r\n\r\n  /**\r\n   * iOS: Temp directory that the OS can clear at will.\r\n   */\r\n  @CordovaProperty\r\n  tempDirectory: string;\r\n\r\n  /**\r\n   * iOS: Holds app-specific files that should be synced (e.g. to iCloud).\r\n   */\r\n  @CordovaProperty\r\n  syncedDataDirectory: string;\r\n\r\n  /**\r\n   * iOS: Files private to the app, but that are meaningful to other applications (e.g. Office files)\r\n   */\r\n  @CordovaProperty\r\n  documentsDirectory: string;\r\n\r\n  /**\r\n   * BlackBerry10: Files globally available to all apps\r\n   */\r\n  @CordovaProperty\r\n  sharedDirectory: string;\r\n\r\n  cordovaFileError: {} = {\r\n    1: 'NOT_FOUND_ERR',\r\n    2: 'SECURITY_ERR',\r\n    3: 'ABORT_ERR',\r\n    4: 'NOT_READABLE_ERR',\r\n    5: 'ENCODING_ERR',\r\n    6: 'NO_MODIFICATION_ALLOWED_ERR',\r\n    7: 'INVALID_STATE_ERR',\r\n    8: 'SYNTAX_ERR',\r\n    9: 'INVALID_MODIFICATION_ERR',\r\n    10: 'QUOTA_EXCEEDED_ERR',\r\n    11: 'TYPE_MISMATCH_ERR',\r\n    12: 'PATH_EXISTS_ERR',\r\n    13: 'WRONG_ENTRY_TYPE',\r\n    14: 'DIR_READ_ERR',\r\n  };\r\n\r\n  /**\r\n   * Get free disk space in Bytes\r\n   * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space in Bytes\r\n   */\r\n  @CordovaCheck()\r\n  getFreeDiskSpace(): Promise<number> {\r\n    return new Promise<any>((resolve, reject) => {\r\n      cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if a directory exists in a certain path, directory.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} dir Name of directory to check\r\n   * @returns {Promise<boolean>} Returns a Promise that resolves to true if the directory exists or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  checkDir(path: string, dir: string): Promise<boolean> {\r\n    if ((/^\\//.test(dir))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    let fullpath = path + dir;\r\n    return this.resolveDirectoryUrl(fullpath)\r\n      .then(() => {\r\n        return true;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Creates a new directory in the specific path.\r\n   * The replace boolean value determines whether to replace an existing directory with the same name.\r\n   * If an existing directory exists and the replace value is false, the promise will fail and return an error.\r\n   *\r\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} dirName Name of directory to create\r\n   * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n   * @returns {Promise<DirectoryEntry>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  createDir(path: string, dirName: string, replace: boolean): Promise<DirectoryEntry> {\r\n    if ((/^\\//.test(dirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    let options: Flags = {\r\n      create: true\r\n    };\r\n\r\n    if (!replace) {\r\n      options.exclusive = true;\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, options);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Remove a directory at a given path.\r\n   *\r\n   * @param {string} path The path to the directory\r\n   * @param {string} dirName The directory name\r\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  removeDir(path: string, dirName: string): Promise<RemoveResult> {\r\n    if ((/^\\//.test(dirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, {create: false});\r\n      })\r\n      .then((de) => {\r\n        return this.remove(de);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Move a directory to a given path.\r\n   *\r\n   * @param {string} path The source path to the directory\r\n   * @param {string} dirName The source directory name\r\n   * @param {string} newPath The destionation path to the directory\r\n   * @param {string} newDirName The destination directory name\r\n   * @returns {Promise<DirectoryEntry|Entry>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  moveDir(path: string, dirName: string, newPath: string, newDirName: string): Promise<DirectoryEntry|Entry> {\r\n    newDirName = newDirName || dirName;\r\n\r\n    if ((/^\\//.test(newDirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, {create: false});\r\n      })\r\n      .then((srcde) => {\r\n        return this.resolveDirectoryUrl(newPath)\r\n          .then((deste) => {\r\n            return this.move(srcde, deste, newDirName);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Copy a directory in various methods. If destination directory exists, will fail to copy.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} dirName Name of directory to copy\r\n   * @param {string} newPath Base FileSystem of new location\r\n   * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)\r\n   * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry object or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  copyDir(path: string, dirName: string, newPath: string, newDirName: string): Promise<Entry> {\r\n    if ((/^\\//.test(newDirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, {create: false});\r\n      })\r\n      .then((srcde) => {\r\n        return this.resolveDirectoryUrl(newPath)\r\n          .then((deste) => {\r\n            return this.copy(srcde, deste, newDirName);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * List files and directory from a given path.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} dirName Name of directory\r\n   * @returns {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  listDir(path: string, dirName: string): Promise<Entry[]> {\r\n    if ((/^\\//.test(dirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<Entry[]>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, {create: false, exclusive: false});\r\n      })\r\n      .then((de) => {\r\n        let reader = de.createReader();\r\n        return this.readEntries(reader);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Removes all files and the directory from a desired location.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} dirName Name of directory\r\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  removeRecursively(path: string, dirName: string): Promise<RemoveResult> {\r\n    if ((/^\\//.test(dirName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'directory cannot start with \\/';\r\n      return Promise.reject<RemoveResult>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getDirectory(fse, dirName, {create: false});\r\n      })\r\n      .then((de) => {\r\n        return this.rimraf(de);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Check if a file exists in a certain path, directory.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} file Name of file to check\r\n   * @returns {Promise<boolean>} Returns a Promise that resolves with a boolean or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  checkFile(path: string, file: string): Promise<boolean> {\r\n    if ((/^\\//.test(file))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveLocalFilesystemUrl(path + file)\r\n      .then((fse) => {\r\n        if (fse.isFile) {\r\n          return true;\r\n        } else {\r\n          let err = new FileError(13);\r\n          err.message = 'input is not a file';\r\n          return Promise.reject<boolean>(err);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Creates a new file in the specific path.\r\n   * The replace boolean value determines whether to replace an existing file with the same name.\r\n   * If an existing file exists and the replace value is false, the promise will fail and return an error.\r\n   *\r\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName Name of file to create\r\n   * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n   * @returns {Promise<FileEntry>} Returns a Promise that resolves to a FileEntry or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  createFile(path: string, fileName: string, replace: boolean): Promise<FileEntry> {\r\n    if ((/^\\//.test(fileName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    let options: Flags = {\r\n      create: true\r\n    };\r\n\r\n    if (!replace) {\r\n      options.exclusive = true;\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getFile(fse, fileName, options);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Removes a file from a desired location.\r\n   *\r\n   * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName Name of file to remove\r\n   * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  removeFile(path: string, fileName: string): Promise<RemoveResult> {\r\n    if ((/^\\//.test(fileName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getFile(fse, fileName, {create: false});\r\n      })\r\n      .then((fe) => {\r\n        return this.remove(fe);\r\n      });\r\n  }\r\n\r\n  /** Write a new file to the desired location.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName path relative to base path\r\n   * @param {string | Blob} text content or blob to write\r\n   * @param {WriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n   * @returns {Promise<any>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  writeFile(path: string, fileName: string,\r\n                   text: string | Blob | ArrayBuffer, options: WriteOptions = {}): Promise<any> {\r\n    if ((/^\\//.test(fileName))) {\r\n      const err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    const getFileOpts: Flags = {\r\n      create: !options.append,\r\n      exclusive: !options.replace\r\n    };\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((directoryEntry: DirectoryEntry) => {\r\n        return this.getFile(directoryEntry, fileName, getFileOpts);\r\n      })\r\n      .then((fileEntry: FileEntry) => {\r\n        return this.writeFileEntry(fileEntry, text, options);\r\n      });\r\n  }\r\n\r\n  /** Write content to FileEntry.\r\n   *\r\n   * @hidden\r\n   * @param {FileEntry} fe file entry object\r\n   * @param {string | Blob} text content or blob to write\r\n   * @param {WriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n   * @returns {Promise<FileEntry>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n   */\r\n  private writeFileEntry(fe: FileEntry, text: string | Blob | ArrayBuffer, options: WriteOptions) {\r\n    return this.createWriter(fe)\r\n      .then((writer) => {\r\n        if (options.append) {\r\n          writer.seek(writer.length);\r\n        }\r\n\r\n        if (options.truncate) {\r\n          writer.truncate(options.truncate);\r\n        }\r\n\r\n        return this.write(writer, text);\r\n      })\r\n      .then(() => fe);\r\n  }\r\n\r\n\r\n  /** Write to an existing file.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName path relative to base path\r\n   * @param {string | Blob} text content or blob to write\r\n   * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  writeExistingFile(path: string, fileName: string, text: string | Blob): Promise<void> {\r\n    return this.writeFile(path, fileName, text, { replace: true });\r\n  }\r\n\r\n  /**\r\n   * Read the contents of a file as text.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} file Name of file, relative to path.\r\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  readAsText(path: string, file: string): Promise<string> {\r\n    if ((/^\\//.test(file))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((directoryEntry: DirectoryEntry) => {\r\n        return this.getFile(directoryEntry, file, {create: false});\r\n      })\r\n      .then((fileEntry: FileEntry) => {\r\n        let reader = new FileReader();\r\n        return new Promise<any>((resolve, reject) => {\r\n          reader.onloadend = () => {\r\n            if (reader.result !== undefined || reader.result !== null) {\r\n              resolve(reader.result);\r\n            } else if (reader.error !== undefined || reader.error !== null) {\r\n              reject(reader.error);\r\n            } else {\r\n              reject({code: null, message: 'READER_ONLOADEND_ERR'});\r\n            }\r\n          };\r\n          fileEntry.file(file => {\r\n            reader.readAsText(file);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n\r\n        });\r\n      });\r\n  }\r\n  /**\r\n   * Read file and return data as a base64 encoded data url.\r\n   * A data url is of the form:\r\n   *      data:[<mediatype>][;base64],<data>\r\n\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} file Name of file, relative to path.\r\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  readAsDataURL(path: string, file: string): Promise<string> {\r\n    if ((/^\\//.test(file))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((directoryEntry: DirectoryEntry) => {\r\n        return this.getFile(directoryEntry, file, {create: false});\r\n      })\r\n      .then((fileEntry: FileEntry) => {\r\n        let reader = new FileReader();\r\n        return new Promise<any>((resolve, reject) => {\r\n          reader.onloadend = () => {\r\n            if (reader.result !== undefined || reader.result !== null) {\r\n              resolve(reader.result);\r\n            } else if (reader.error !== undefined || reader.error !== null) {\r\n              reject(reader.error);\r\n            } else {\r\n              reject({code: null, message: 'READER_ONLOADEND_ERR'});\r\n            }\r\n          };\r\n\r\n\r\n\r\n          fileEntry.file(file => {\r\n            reader.readAsDataURL(file);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Read file and return data as a binary data.\r\n\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} file Name of file, relative to path.\r\n   * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  readAsBinaryString(path: string, file: string): Promise<string> {\r\n    if ((/^\\//.test(file))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((directoryEntry: DirectoryEntry) => {\r\n        return this.getFile(directoryEntry, file, {create: false});\r\n      })\r\n      .then((fileEntry: FileEntry) => {\r\n        let reader = new FileReader();\r\n        return new Promise<any>((resolve, reject) => {\r\n          reader.onloadend = () => {\r\n            if (reader.result !== undefined || reader.result !== null) {\r\n              resolve(reader.result);\r\n            } else if (reader.error !== undefined || reader.error !== null) {\r\n              reject(reader.error);\r\n            } else {\r\n              reject({code: null, message: 'READER_ONLOADEND_ERR'});\r\n            }\r\n          };\r\n\r\n          fileEntry.file(file => {\r\n            reader.readAsBinaryString(file);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Read file and return data as an ArrayBuffer.\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} file Name of file, relative to path.\r\n   * @returns {Promise<ArrayBuffer>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  readAsArrayBuffer(path: string, file: string): Promise<ArrayBuffer> {\r\n    if ((/^\\//.test(file))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file-name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((directoryEntry: DirectoryEntry) => {\r\n        return this.getFile(directoryEntry, file, {create: false});\r\n      })\r\n      .then((fileEntry: FileEntry) => {\r\n        let reader = new FileReader();\r\n        return new Promise<any>((resolve, reject) => {\r\n          reader.onloadend = () => {\r\n            if (reader.result !== undefined || reader.result !== null) {\r\n              resolve(reader.result);\r\n            } else if (reader.error !== undefined || reader.error !== null) {\r\n              reject(reader.error);\r\n            } else {\r\n              reject({code: null, message: 'READER_ONLOADEND_ERR'});\r\n            }\r\n          };\r\n\r\n          fileEntry.file(file => {\r\n            reader.readAsArrayBuffer(file);\r\n          }, error => {\r\n            reject(error);\r\n          });\r\n\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Move a file to a given path.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName Name of file to move\r\n   * @param {string} newPath Base FileSystem of new location\r\n   * @param {string} newFileName New name of file to move to (leave blank to remain the same)\r\n   * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  moveFile(path: string, fileName: string, newPath: string, newFileName: string): Promise<Entry> {\r\n    newFileName = newFileName || fileName;\r\n\r\n    if ((/^\\//.test(newFileName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getFile(fse, fileName, {create: false});\r\n      })\r\n      .then((srcfe) => {\r\n        return this.resolveDirectoryUrl(newPath)\r\n          .then((deste) => {\r\n            return this.move(srcfe, deste, newFileName);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Copy a file in various methods. If file exists, will fail to copy.\r\n   *\r\n   * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n   * @param {string} fileName Name of file to copy\r\n   * @param {string} newPath Base FileSystem of new location\r\n   * @param {string} newFileName New name of file to copy to (leave blank to remain the same)\r\n   * @returns {Promise<Entry>} Returns a Promise that resolves to an Entry or rejects with an error.\r\n   */\r\n  @CordovaCheck()\r\n  copyFile(path: string, fileName: string, newPath: string, newFileName: string): Promise<Entry> {\r\n    newFileName = newFileName || fileName;\r\n\r\n    if ((/^\\//.test(newFileName))) {\r\n      let err = new FileError(5);\r\n      err.message = 'file name cannot start with \\/';\r\n      return Promise.reject<any>(err);\r\n    }\r\n\r\n    return this.resolveDirectoryUrl(path)\r\n      .then((fse) => {\r\n        return this.getFile(fse, fileName, {create: false});\r\n      })\r\n      .then((srcfe) => {\r\n        return this.resolveDirectoryUrl(newPath)\r\n          .then((deste) => {\r\n            return this.copy(srcfe, deste, newFileName);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private fillErrorMessage(err: FileError): void {\r\n    try {\r\n      err.message = this.cordovaFileError[err.code];\r\n    } catch (e) {}\r\n  }\r\n\r\n  /**\r\n   * Resolves a local file system URL\r\n   * @param fileUrl {string} file system url\r\n   * @returns {Promise<Entry>}\r\n   */\r\n  @CordovaCheck()\r\n  resolveLocalFilesystemUrl(fileUrl: string): Promise<Entry> {\r\n    return new Promise<Entry>((resolve, reject) => {\r\n      try {\r\n        window.resolveLocalFileSystemURL(fileUrl, (entry) => {\r\n          resolve(entry);\r\n        }, (err) => {\r\n          this.fillErrorMessage(err);\r\n          reject(err);\r\n        });\r\n      } catch (xc) {\r\n        this.fillErrorMessage(xc);\r\n        reject(xc);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resolves a local directory url\r\n   * @param directoryUrl {string} directory system url\r\n   * @returns {Promise<DirectoryEntry>}\r\n   */\r\n  @CordovaCheck()\r\n  resolveDirectoryUrl(directoryUrl: string): Promise<DirectoryEntry> {\r\n    return this.resolveLocalFilesystemUrl(directoryUrl)\r\n      .then((de) => {\r\n        if (de.isDirectory) {\r\n          return <DirectoryEntry>de;\r\n        } else {\r\n          let err = new FileError(13);\r\n          err.message = 'input is not a directory';\r\n          return Promise.reject<DirectoryEntry>(err);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get a directory\r\n   * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n   * @param directoryName {string} Directory name\r\n   * @param flags {Flags} Options\r\n   * @returns {Promise<DirectoryEntry>}\r\n   */\r\n  @CordovaCheck()\r\n  getDirectory(directoryEntry: DirectoryEntry, directoryName: string, flags: Flags): Promise<DirectoryEntry> {\r\n    return new Promise<DirectoryEntry>((resolve, reject) => {\r\n      try {\r\n        directoryEntry.getDirectory(directoryName, flags, (de) => {\r\n          resolve(de);\r\n        }, (err) => {\r\n          this.fillErrorMessage(err);\r\n          reject(err);\r\n        });\r\n      } catch (xc) {\r\n        this.fillErrorMessage(xc);\r\n        reject(xc);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a file\r\n   * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n   * @param fileName {string} File name\r\n   * @param flags {Flags} Options\r\n   * @returns {Promise<FileEntry>}\r\n   */\r\n  @CordovaCheck()\r\n  getFile(directoryEntry: DirectoryEntry, fileName: string, flags: Flags): Promise<FileEntry> {\r\n    return new Promise<FileEntry>((resolve, reject) => {\r\n      try {\r\n        directoryEntry.getFile(fileName, flags, resolve, (err) => {\r\n          this.fillErrorMessage(err);\r\n          reject(err);\r\n        });\r\n      } catch (xc) {\r\n        this.fillErrorMessage(xc);\r\n        reject(xc);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private remove(fe: Entry): Promise<RemoveResult> {\r\n    return new Promise<RemoveResult>((resolve, reject) => {\r\n      fe.remove(() => {\r\n        resolve({success: true, fileRemoved: fe});\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private move(srce: Entry, destdir: DirectoryEntry, newName: string): Promise<Entry> {\r\n    return new Promise<Entry>((resolve, reject) => {\r\n      srce.moveTo(destdir, newName, (deste) => {\r\n        resolve(deste);\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private copy(srce: Entry, destdir: DirectoryEntry, newName: string): Promise<Entry> {\r\n    return new Promise<Entry>((resolve, reject) => {\r\n      srce.copyTo(destdir, newName, (deste) => {\r\n        resolve(deste);\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private readEntries(dr: DirectoryReader): Promise<Entry[]> {\r\n    return new Promise<Entry[]>((resolve, reject) => {\r\n      dr.readEntries((entries) => {\r\n        resolve(entries);\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private rimraf(de: DirectoryEntry): Promise<RemoveResult> {\r\n    return new Promise<RemoveResult>((resolve, reject) => {\r\n      de.removeRecursively(() => {\r\n        resolve({success: true, fileRemoved: de});\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private createWriter(fe: FileEntry): Promise<FileWriter> {\r\n    return new Promise<FileWriter>((resolve, reject) => {\r\n      fe.createWriter((writer) => {\r\n        resolve(writer);\r\n      }, (err) => {\r\n        this.fillErrorMessage(err);\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private write(writer: FileWriter, gu: string | Blob | ArrayBuffer): Promise<any> {\r\n    if (gu instanceof Blob) {\r\n      return this.writeFileInChunks(writer, gu);\r\n    }\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      writer.onwriteend = (evt) => {\r\n        if (writer.error) {\r\n          reject(writer.error);\r\n        } else {\r\n          resolve(evt);\r\n        }\r\n      };\r\n      writer.write(gu);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  private writeFileInChunks(writer: FileWriter, file: Blob) {\r\n    const BLOCK_SIZE = 1024 * 1024;\r\n    let writtenSize = 0;\r\n\r\n    function writeNextChunk() {\r\n      const size = Math.min(BLOCK_SIZE, file.size - writtenSize);\r\n      const chunk = file.slice(writtenSize, writtenSize + size);\r\n\r\n      writtenSize += size;\r\n      writer.write(chunk);\r\n    }\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      writer.onerror = reject;\r\n      writer.onwrite = () => {\r\n        if (writtenSize < file.size) {\r\n          writeNextChunk();\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      writeNextChunk();\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}